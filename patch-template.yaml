imports:
  patchinfo: runtime/debug
  patchos: os
  patchbytes: bytes
  patchstack: github.com/maruel/panicparse/stack
  patchjson:  encoding/json
  patchsqsutil: github.com/fabric8-analytics/poc-ocp-upgrade-prediction/pkg/sqsconnect
  patchstrconv: strconv
  patchfmt: fmt
  patchsync: sync

func_name:
  logStatement
func_body: |
  func logStatement() {
    traceflagstr := patchos.Getenv("OPENSHIFT_CAPTURE_TRACE")
    if traceflagstr == "" {
      panic("Please set OPENSHIFT_CAPTURE_TRACE to true/false")
    }
    traceflag, err := patchstrconv.ParseBool(traceflagstr)
    if err != nil {
      panic("Please set OPENSHIFT_CAPTURE_TRACE to true/false")
    }
    if traceflag {
      callstack := patchinfo.Stack()
      in := patchbytes.NewBufferString(string(callstack))
      c, err := patchstack.ParseDump(in, patchos.Stdout, true)
      if err != nil {
        return
      }
      patchfmt.Printf("Sending callstack to SQS: %v\n", c)
      stackJSON, err := patchjson.Marshal(c)
      if err != nil {
        patchfmt.Printf("Got error in trying to Marshal stack to JSON: %v\n", err)
        return
      }
      patchfmt.Printf("Now publishing to SQS\n")
      patchsqsutil.PublishCallStack(string(stackJSON), 1)
    }
  }

prepend_body: |
  defer logStatement()
